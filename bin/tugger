#!/bin/bash

# exit on error
set -e

# check if running on mac
running_on_mac=0
docker_for_mac=0
if [ "$(uname)" == "Darwin" ]
then
    running_on_mac=1
fi

#on mac with newer implementation of docker for mac check if installed
if [[ $(docker version --format "{{.Server.KernelVersion}}") == *-moby ]]
then
    docker_for_mac=1
fi

#on mac, check if docker-machine is running on old implementations of boot2docker or docker for mac beta
if [ "$running_on_mac" == 1 ] && [ "$docker_for_mac" == 0 ]
then
	if [ "$(docker-machine status default)" != "Running" ] 
	then
    	echo "Please run in Docker Quickstart Terminal"
    	exit 1
    fi
fi



# check if running as root
if [ "$(whoami)" == "root" ]
then
    echo "Do not run this as root (add yourself to the docker group if required)"
    exit 1
fi

# get real path of tugger installation, also if started from symlink
resolve_symlink() {
    path="$1"
    if [ "$running_on_mac" == 1 ]
    then
        path_real="$(readlink "$path" || echo "$path")"
    else
        path_real="$(realpath "$path")"
    fi
    if [ "$path_real" == "" ]
    then
        echo "Could not resolve real path for '$path'."
        if [ "$running_on_mac" != 1 ];
        then
            echo "Please make sure that 'realpath' is installed."
        fi
        exit 1
    fi
    echo "$path_real"
}
tugger_install_dir="$(dirname "$(dirname "$(resolve_symlink "$0")")")"

# on mac, check if tugger_install_dir is under /Users
if [ "$running_on_mac" == 1 ] && [ "$(echo "$tugger_install_dir" | cut -d "/" -f 2)" != "Users" ]
then
    echo "Tugger has to be installed in a subdirectory of /Users/, e.g. /Users/your_username/some/target/path/tugger"
    exit 1
fi

# parse command line args
show_help=0
reprovision=0
recreate_berksfile_lock=0
recreate_container=0
rebuild_image=0
tugger_action=""
tugger_file="./Tuggerfile"

while [[ $# > 0 ]]
do
    key="$1"
    shift
    
    case $key in
    -h|--help)
        show_help=1
        ;;
    -r|--reprovision)
        reprovision=1
        ;;
    -l|--recreate-berksfile-lock)
        recreate_berksfile_lock=1
        ;;
    -c|--recreate-container)
        recreate_container=1
        reprovision=1
        ;;
    -b|--rebuild-image)
        rebuild_image=1
        recreate_container=1
        reprovision=1
        ;;
    -f|--file)
        tugger_file="$1"
        shift
        ;;
    start)
        tugger_action="start"
        ;;
    stop)
        tugger_action="stop"
        ;;
    restart)
        tugger_action="restart"
        ;;
    remove)
        tugger_action="remove"
        ;;
    status)
        tugger_action="status"
        ;;
    *)
        # unknown option
        echo "Invalid argument: $key"
        echo
        show_help="1"
        ;;
    esac
done

# get absolute path to project dir
folder_absolute_path() {
    path="$1"
    if [ "$running_on_mac" == 1 ]
    then
        path_real="$(cd "$path" && pwd)"
    else
        path_real="$(realpath "$path")"
    fi
    if [ "$path_real" == "" ]
    then
        echo "Could not resolve real path for '$path'."
        if [ "$running_on_mac" != 1 ];
        then
            echo "Please make sure that 'realpath' is installed."
        fi
        exit 1
    fi
    echo "$path_real"
}
project_dir="$(folder_absolute_path $(dirname "$tugger_file"))"

# show help
if [ "$show_help" == 1 ] || [ "$tugger_action" == "" ]
then
    echo "Simple tool for running Docker based development environments with Chef and Berkshelf"
    echo "based provisioning. Reads config from the 'Tuggerfile' in your project root folder."
    echo
    echo "Usage: tugger ACTION [OPTIONS]"
    echo
    echo "Where ACTION has to be one of:"
    echo "  start                           Start the container"
    echo "  stop                            Stop the container"
    echo "  restart                         Restart the container"
    echo "  remove                          Permanently remove the container"
    echo "  status                          Show status information for the container"
    echo
    echo "And where OPTIONS can be:"
    echo "  -h, --help                      Show this help"
    echo "  -r, --reprovision               Force to run provisioning, also when container was"
    echo "                                  already provisioned before"
    echo "  -l, --recreate-berksfile-lock   Force to recreate Berksfile.lock and update the used"
    echo "                                  versions of the packages"
    echo "  -c, --recreate-container        Force to recreate the docker container from the"
    echo "                                  base image used by the tugger-stack"
    echo "  -b, --rebuild-image             Force to rebuild the docker base image, also when"
    echo "                                  image was already build from Dockerfile before"
    echo "  -f, --file TUGGER_FILE          Pass path to 'Tuggerfile' to be used, default is"
    echo "                                  './Tuggerfile'"
    echo
    echo "Examples:"
    echo "  tugger start                  Start the container as configured in './Tuggerfile'"
    echo "  tugger start --reprovision    Start and reprovision the container"
    echo "  tugger stop                   Stop the container"
    echo "  tugger restart                Restart the container"
    echo "  tugger restart --reprovision  Restart and reprovision the container"
    echo "  tugger remove                 Permanently remove the container"
    echo "  tugger status                 Show status information for the container"
    exit 0
fi

# load tugger file
if ! test -e "$tugger_file"
then
    echo "Tuggerfile '$tugger_file' not found"
    exit 1
fi
source "$tugger_file"
if [ "$project_name" == "" ]
then
    echo "Mandatory variable missing in Tuggerfile: project_name"
    exit 1
fi
if [ "$tugger_stack_git_url" == "" ]
then
    echo "Mandatory variable missing in Tuggerfile: tugger_stack_git_url"
    exit 1
fi
if [ "$tugger_stack_version" == "" ]
then
    echo "Mandatory variable missing in Tuggerfile: tugger_stack_version"
    exit 1
fi
if [ "$tugger_stack_shared_image_name" == "" ]
then
    echo "Mandatory variable missing in Tuggerfile: tugger_stack_shared_image_name"
    exit 1
fi

# clone tugger stack
if ([ "$reprovision" == 1 ] || [ "$rebuild_image" == 1 ]) && test -e "$HOME/.tugger/projects/$project_name/tugger-stack"
then
    echo "Removing old version of tugger-stack..."
    rm -rf "$HOME/.tugger/projects/$project_name/tugger-stack"
fi
if ! test -e "$HOME/.tugger/projects/$project_name/tugger-stack"
then
    echo "Cloning tugger-stack from '$tugger_stack_git_url' using branch or tag '$tugger_stack_version'..."
    git clone --branch "$tugger_stack_version" "$tugger_stack_git_url" "$HOME/.tugger/projects/$project_name/tugger-stack"
fi

# cp tugger file
cp "$tugger_file" "$HOME/.tugger/projects/$project_name/Tuggerfile"

# create timezone file
if [ "$timezone" != "" ]
then
    echo "$timezone" > "$HOME/.tugger/projects/$project_name/timezone"
else
    echo "Europe/Berlin" > "$HOME/.tugger/projects/$project_name/timezone"
fi

# build the docker image
existing_image_id="$(docker inspect --format '{{.Id}}' "$tugger_stack_shared_image_name" 2> /dev/null || true)"
if [ "$rebuild_image" == 1 ] && [ "$existing_image_id" != "" ]
then
    echo "Removing old version of tugger-stack..."
    if ! docker rmi "$tugger_stack_shared_image_name"
    then
        echo "Failed to remove existing image, restoring tag name for image..."
        docker tag "$existing_image_id" "$tugger_stack_shared_image_name" || true
        echo
        echo "If removing the image fails because it is still used by another container, but you still want to"
        echo "build a totally fresh image from scratch for some reason, please consider using another value for"
        echo "tugger_stack_shared_image_name in your Tuggerfile."
        exit 1
    fi
    existing_image_id=""
fi
if [ "$existing_image_id" == "" ]
then
    docker_build_params=""
    if [ "$rebuild_image" == 1 ]
    then
        docker_build_params="$docker_build_params --no-cache"
    fi
    docker build $docker_build_params -t "$tugger_stack_shared_image_name" "$HOME/.tugger/projects/$project_name/tugger-stack"
fi

# reprovision
if [ "$reprovision" == 1 ]
then
    touch "$HOME/.tugger/projects/$project_name/reprovision.touch"
else
    rm -f "$HOME/.tugger/projects/$project_name/reprovision.touch"
fi

# force recreate of berksfile lock
if [ "$recreate_berksfile_lock" == 1 ]
then
    touch "$HOME/.tugger/projects/$project_name/recreate-berksfile-lock.touch"
else
    rm -f "$HOME/.tugger/projects/$project_name/recreate-berksfile-lock.touch"
fi

# get status information
set_container_status_vars() {
    export existing_container_id="$(docker inspect --format '{{.Id}}' "$project_name" 2> /dev/null || true)"
    export existing_container_running="$(docker inspect --format '{{.State.Running}}' "$project_name" 2> /dev/null || true)"
    export existing_container_ip_address="$(docker inspect --format '{{.NetworkSettings.IPAddress}}' "$project_name" 2> /dev/null || true)"
    if [ "$existing_container_ip_address" != "" ]
    then
        export existing_container_ip_address_display="$existing_container_ip_address"
        if [ "$etc_hosts" != "" ]
        then
            export existing_container_etc_hosts_display="$etc_hosts"
        else
            export existing_container_etc_hosts_display="-"
        fi
    else
        export existing_container_ip_address_display="-"
        export existing_container_etc_hosts_display="-"
    fi
    export docker_host_ip="127.0.0.1"
    
    #only export different host_ip if running on old boot2docker
    if [ "$running_on_mac" == 1 ] && [ "$docker_for_mac" == 0 ]
    then
       export docker_host_ip="$(docker-machine ip default 2> /dev/null || true)"
        # when `docker-machine ip` is broken with "Something went wrong running an SSH command!" errors, fall back to `docker-machine inspect`
        if [ "$docker_host_ip" == "" ]
        then
            echo "WARNING: 'docker-machine ip default' failed, falling back to 'docker-machine inspect default' to get IP address of docker host machine."
            echo "         Please fix this by recreating your docker-machine or upgrading docker."
            export docker_host_ip="$(docker-machine inspect default --format '{{.Driver.IPAddress}}' 2> /dev/null || true)"
        fi
    fi
}
set_container_status_vars

# force to run fresh provisioning when recreating a new container7
if [ "$recreate_container" == 1 ] || [ "$existing_container_id" == "" ]
then
    rm -f "$HOME/.tugger/projects/$project_name/chef-completed.touch"
fi

# get mapped ports
is_port_used() {
    p="$1"
    # check against tugger ports
    ports_output="$(cat "$HOME/.tugger/ports" 2> /dev/null | awk "\$3 == \"$p\"")"
    # netstat check
    netstat_output=""
    if [ "$running_on_mac" != 1 ]
    then
        netstat_output="$(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \":$p\"")"
    else
        netstat_output="$(netstat -anp tcp | awk "\$6 == \"LISTEN\" && \$4 ~ \"\\\\.$p\"")"
    fi
    if [ "$netstat_output" != "" ] || [ "$ports_output" != "" ]
    then
        # return 0 == success
        return 0
    else
        # return 1 == failure
        return 1
    fi
}
find_free_port() {
    p="$1"
    while is_port_used "$p"
    do
        p=$[$p + 1]
    done
    echo "$p"
}
gen_host_port() {
    p="$1"
    echo "72$[$p % 100]"
}
get_mapped_ports_list() {
    ports_list=""
    if [ "$mapped_ports" != "" ]
    then
        for container_port in $mapped_ports
        do
            ports_output="$(cat "$HOME/.tugger/ports" 2> /dev/null | awk "\$1 == \"$project_name\" && \$2 == \"$container_port\"")"
            if [ "$ports_output" == "" ]
            then
                host_port="$(find_free_port $(gen_host_port $container_port))"
                echo "$project_name $container_port $host_port" >> "$HOME/.tugger/ports"
            fi
        done
        ports_list="$(cat "$HOME/.tugger/ports" 2> /dev/null | awk "\$1 == \"$project_name\"")"
    fi
    echo "$ports_list"
}
get_exposed_ports_list() {
    ports_list=""
    if [ "$exposed_ports" != "" ]
    then
        newline=$'\n'
        for port in $exposed_ports
        do
            ports_list="${ports_list}${project_name} ${port} ${port}${newline}"
        done
    fi
    echo "$ports_list"
}
get_mapped_ports_params() {
    map="$1"
    params=""
    if [ "$map" != "" ]
    then
        params="$(echo "$map" | awk "{ printf \"-p \"\$3\":\"\$2\" \" }")"
    fi
    echo "$params"
}
get_mapped_ports_summary() {
    map="$1"
    summary=""
    if [ "$map" != "" ]
    then
        summary="$(echo "$map" | awk "{ print \"                                      $docker_host_ip:\"\$3\" --> \"\$2\" \" }")"
    fi
    echo "$summary"
}
mapped_ports_list="$(get_mapped_ports_list)"
mapped_ports_params="$(get_mapped_ports_params "$mapped_ports_list")"
mapped_ports_summary="$(get_mapped_ports_summary "$mapped_ports_list")"
exposed_ports_list="$(get_exposed_ports_list)"
exposed_ports_params="$(get_mapped_ports_params "$exposed_ports_list")"
exposed_ports_summary="$(get_mapped_ports_summary "$exposed_ports_list")"

# get boot2docker fast_folders
get_boot2docker_fast_folders_params() {
    params=""
    if [ "$running_on_mac" == 1 ] && [ "$docker_for_mac" == 0 ]
    then
        for folder in $boot2docker_fast_folders
        do
            local_folder="/mnt/sda1/boot2docker_fast_folders/${project_name}/${folder}"
            docker-machine ssh default sudo mkdir -p ${local_folder}
            docker-machine ssh default sudo chmod -R a+rwX ${local_folder}
            params="$params -v ${local_folder}:/var/www/webproject/${folder}"
            params="$params -v ${project_dir}/${folder}:/var/www/webproject/${folder}.hostfs"
        done
    fi
    echo "$params"
}
boot2docker_fast_folders_params="$(get_boot2docker_fast_folders_params)"

# handle the requested tugger action
if [ "$tugger_action" == "remove" ]
then
    echo "Permanently removing container '$project_name'..."
    docker rm "$project_name" > /dev/null
    rm -rvf "$HOME/.tugger/projects/$project_name"
fi
# stop container?
if [ "$tugger_action" == "stop" ] || [ "$tugger_action" == "restart" ]
then
    echo "Stopping container '$project_name'..."
    if [ "$existing_container_running" != "true" ]
    then
        echo "Failed to stop container, container is not running"
        exit 1
    fi
    docker stop "$project_name" > /dev/null
    sleep 2
    # update status
    set_container_status_vars
fi
# start container?
if [ "$tugger_action" == "start" ] || [ "$tugger_action" == "restart" ]
then
    # start or create container
    if [ "$existing_container_running" == "true" ]
    then
        echo "Failed to start container, container is already running"
        exit 1
    fi
    rm -f "$HOME/.tugger/projects/$project_name/init-completed.touch"
    echo -n > "$HOME/.tugger/projects/$project_name/init.log"
    pkill -f "tail -f $HOME/.tugger/projects/$project_name/init.log" || true
    tail -f "$HOME/.tugger/projects/$project_name/init.log" &
    log_tail_pid=$!
    if [ "$existing_container_id" != "" ] && [ "$recreate_container" == 1 ]
    then
        echo "Recreate option given, deleting existing container '$project_name'..."
        docker rm "$project_name" > /dev/null
        existing_container_id=""
    fi
    if [ "$existing_container_id" == "" ]
    then
        echo "Creating new container '$project_name'..."
        if ! test -e "$HOME/.ssh/"
        then
            echo "Folder '$HOME/.ssh/' not found. Please create it first."
            exit 1
        fi
        if ! test -e "$HOME/.gitconfig"
        then
            echo "File '$HOME/.gitconfig' not found. Please create it first by running 'git config --global user.name \"John Doe\"' and 'git config --global user.email johndoe@example.com'."
            exit 1
        fi
        if ! test -e "$HOME/.composer/"
        then
            echo "Folder '$HOME/.composer/' not found. Please create it first."
            exit 1
        fi
        docker run -d --name "$project_name" --hostname "$project_name" $mapped_ports_params $exposed_ports_params -v "$HOME/.ssh/:/home/webserver/.ssh/" -v "$HOME/.gitconfig:/home/webserver/.gitconfig" -v "$HOME/.composer/:/home/webserver/.composer/" -v "$HOME/.tugger/projects/$project_name:/tugger" -v "$tugger_install_dir/lib:/tugger/lib" -v "$project_dir:/var/www/webproject" $boot2docker_fast_folders_params -t "$tugger_stack_shared_image_name" /bin/bash /tugger/lib/tugger-container-init/init-wrapper > /dev/null
    else
        echo "Starting already existing container '$project_name'..."
        docker start "$project_name" > /dev/null
    fi
    # wait until init completed
    while ! test -e "$HOME/.tugger/projects/$project_name/init-completed.touch"
    do
        sleep 5
        if [ "$(docker inspect --format '{{.State.Running}}' "$project_name" 2> /dev/null || true)" != "true" ]
        then
            echo "Container not running anymore, container init failed?"
            kill -PIPE "$log_tail_pid"
            exit 1
        fi
    done
    echo "Container init completed"
    echo
    kill -PIPE "$log_tail_pid"
    # update status
    set_container_status_vars
fi
# update /etc/hosts?
if [ "$etc_hosts" != "" ] && ([ "$tugger_action" == "start" ] || [ "$tugger_action" == "restart" ] || [ "$tugger_action" == "remove" ])
then
    echo "Updating /etc/hosts file..."
    etc_hosts_ip="$(([ "$running_on_mac" != 1 ] && echo "$existing_container_ip_address") || (echo "$docker_host_ip"))"
    # remove invalid hosts entries
    remove_ips_and_hosts=""
    hosts_output="$(cat "/etc/hosts" 2> /dev/null | awk "\$3 == \"#\" && \$4 == \"added-by-tugger(project_name=$project_name)\" { print \$1\":\"\$2 }")"
    for ip_and_host in $hosts_output
    do
        ip="$(echo "$ip_and_host" | cut -d ":" -f 1)"
        host="$(echo "$ip_and_host" | cut -d ":" -f 2)"
        if [ "$tugger_action" == "remove" ] || [ "$ip" != "$etc_hosts_ip" ]
        then
            remove_ips_and_hosts="$remove_ips_and_hosts $ip_and_host"
            continue
        fi
        host_valid=0
        for h in $etc_hosts
        do
            if [ "$host" == "$h" ]
            then
                host_valid=1
                break
            fi
        done
        if [ "$host_valid" != 1 ]
        then
            remove_ips_and_hosts="$remove_ips_and_hosts $ip_and_host"
            continue
        fi
    done
    for ip_and_host in $remove_ips_and_hosts
    do
        ip="$(echo "$ip_and_host" | cut -d ":" -f 1)"
        host="$(echo "$ip_and_host" | cut -d ":" -f 2)"
        ip_escaped="$(echo "$ip" | sed 's/\./\\\./g')"
        host_escaped="$(echo "$host" | sed 's/\./\\\./g')"
        echo "Removing $ip $host from /etc/hosts... (please enter password for sudo operation when prompted)"
        if [ "$running_on_mac" == 1 ]
        then
            sudo sed -i "" "/$ip_escaped $host_escaped # added-by-tugger(project_name=$project_name)/d" /etc/hosts
        else
            sudo sed -i "/$ip_escaped $host_escaped # added-by-tugger(project_name=$project_name)/d" /etc/hosts
        fi
    done
    # add missing hosts entries
    if [ "$tugger_action" == "start" ] || [ "$tugger_action" == "restart" ]
    then
        add_hosts=""
        for host in $etc_hosts
        do
            hosts_output="$(cat "/etc/hosts" 2> /dev/null | awk "\$1 == \"$etc_hosts_ip\" && \$2 == \"$host\" && \$3 == \"#\" && \$4 == \"added-by-tugger(project_name=$project_name)\"")"
            if [ "$hosts_output" == "" ]
            then
                add_hosts="$add_hosts $host"
            fi
        done
        for host in $add_hosts
        do
            echo "Adding $etc_hosts_ip $host to /etc/hosts... (please enter password for sudo operation when prompted)"
            echo "$etc_hosts_ip $host # added-by-tugger(project_name=$project_name)" | sudo tee -a /etc/hosts > /dev/null
        done
    fi
fi
# update etc_hosts_other_tugger_containers (let the container know about the host names of other containers)
if [ "$tugger_action" == "start" ] || [ "$tugger_action" == "restart" ]
then
    echo "$(cat "/etc/hosts" 2> /dev/null | grep "added-by-tugger(project_name=" | awk "\$3 == \"#\" && \$4 != \"added-by-tugger(project_name=$project_name)\" { print \$1\" \"\$2 }")" > $HOME/.tugger/projects/$project_name/etc_hosts_other_tugger_containers
fi
# output status?
if [ "$tugger_action" == "status" ] || [ "$tugger_action" == "start" ] || [ "$tugger_action" == "restart" ]
then
    echo
    echo "Status information for container:     $project_name"
    if [ "$existing_container_id" == "" ]
    then
        echo "Container not created yet, no container found with that name"
    else
        echo "Container ID:                         $existing_container_id"
        echo "Container currently running:          $existing_container_running"
        echo "Docker host IP address:               $docker_host_ip"
        echo "Current container IP address:         $existing_container_ip_address_display"
        echo "Current container host name(s):       $existing_container_etc_hosts_display"
        echo
        echo "Mapped ports:"
        echo "$mapped_ports_summary";
        if [ "$exposed_ports" != "" ]
        then
            echo
            echo "Exposed ports:"
            echo "$exposed_ports_summary";
        fi
    fi
    echo
fi
